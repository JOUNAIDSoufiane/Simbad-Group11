//--------------------------------------------------------
//Code generated by Papyrus Java
//--------------------------------------------------------

package main.java.softdesign;


/************************************************************/
/**
* 
*/
public class FileServer {
	/**
	 * 
	 */
	private static FileServer file_server = new FileServer();
	/**
	 * 
	 */
	private Coordinates[] unvisited = new Coordinates[2601];
	/**
	 * 
	 */
	public Object[] objects = new Object[100];

	/**
	 * 
	 * 
	 */
	public static FileServer getinstance() {
		return file_server;
	}
	/**
	 * 
	 * @param coordinates 
	 */
	public void update_objects(Coordinates coordinates) {
		
	}
	
	/**
	 * 
	 * @param coordinates
	 */
	public void remove_coordinates(Coordinates coordinates) {
		//replace already visited coordinate in array with coordinate 99,99
		int location = (int) (((12.5 + coordinates.x) / 0.5 * 51) + (12.5 + coordinates.y) / 0.5); 

		unvisited[location].x = 99;
		unvisited[location].y = 99;
	}
	/**
	 * 
	 * @param coordinates
	 */
	public boolean visited(Coordinates coordinates) {
		return unvisited[(int) (((12.5 + coordinates.x) / 0.5 * 51) + (12.5 + coordinates.y) / 0.5)].x == 99;
	}
	
	
	
	
	public Coordinates get_coordinates(Coordinates robot_position){ // gets the remaining  unvisited coordinates
		
		// IDEAS : TWO METHODS, return coordinates in the same quadrant or return next unvisited coordinate starting from the robot_position 
		
		int start_loop1, end_loop1, start_loop2, end_loop2;
		
		if (robot_position.x >= 0){
			if (robot_position.y >= 0){
				// quadrant I + + start at 25 and ends at 50 for both loops
				start_loop1 = 25;
				end_loop1 = 50;
				start_loop2 = 25;
				end_loop2 = 50;
			}
			else{
				// quadrant II + - starts at 25 and ends at 50 for first loop and starts at 0 and ends at 25 for second loop
				start_loop1 = 25;
				end_loop1 = 50;
				start_loop2 = 0;
				end_loop2 = 25;
			}

		}
		else
			if (robot_position.y >= 0){
				// quadrant IV - + starts at 0 and ends at 25 for first loop and starts at 25 and ends at 50 for second loop
				start_loop1 = 0;
				end_loop1 = 25;
				start_loop2 = 25;
				end_loop2 = 50;
			}
			else{
				// quadrant III - - starts at 0 and ends at 25 for both loops (excluding 25)
				start_loop1 = 0;
				end_loop1 = 25;
				start_loop2 = 0;
				end_loop2 = 25;
			}
				
		for(int i = start_loop1; i < end_loop1; i++) {  
			for (int j = start_loop2; j < end_loop2; j++) {
				if (unvisited[i*51+j].x != 99)
					return unvisited[i*51+j];    // make this even smarter 
			}
		}
				
		return null; // in case all coordinates are visited 
	}
	
	
	
	
	public void count() {
		int visited_coords = 0, unvisited_coords = 0;
		
		for (Coordinates coordinates : unvisited) {
			if(coordinates.x == 99)
				visited_coords++;
			else
				unvisited_coords++;
		}
		
		System.out.println("Number of Visited Coordinates: " + visited_coords);
		System.out.println("Number of Unvisited Coordinates: " + unvisited_coords);
	}
	
	/**
	 * 
	 *
	 */
	private FileServer() {
		
		//initialize unvisited array with all possible coordinates
		int count = 0;
		double x = -12.5;
		while (x <= 12.5) {
			double y = -12.5;
			while (y <= 12.5) {
				unvisited[count] = new Coordinates(x,y);
				y += 0.5;
				count++;
			}
			x += 0.5;
		}
		
		//removing coordinates for outer walls from unvisited array
		for(double i = -12.5; i <= 12.5; i+=0.5) {
			remove_coordinates(new Coordinates(12.5, i));
			remove_coordinates(new Coordinates(-12.5, i));
			remove_coordinates(new Coordinates(i, 12.5));
			remove_coordinates(new Coordinates(i, -12.5));
		}
	}
};