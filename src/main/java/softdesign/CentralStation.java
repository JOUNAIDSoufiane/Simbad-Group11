//--------------------------------------------------------
//Code generated by Papyrus Java
//--------------------------------------------------------

package main.java.softdesign;

import java.awt.image.BufferedImage;

import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;



/************************************************************/
/**
* 
*/
public class CentralStation {
	/**
	 * 
	 */
	private Robot[] robots;
	/**
	 * 
	 */
	private static CentralStation central_station = new CentralStation();
	/**
	 * 
	 */
	private static String[] behavior_patterns;
	/**
	 * 
	 */
	private FileServer file_server;
	/**
	 * 
	 */
	private Coordinates[] robots_positions;

	/**
	 * 
	 */
	public static CentralStation getinstance() {
		return central_station;
	}
	
	/**
	 * 
	 * @param position
	 * @param name
	 * @param count
	 */
	public Robot deploy_robot(Vector3d position, String name) {
		//parse name to find robot's number
		int robots_number = Integer.parseInt(name.replaceAll("\\D", ""));
		
		//check if coordinate has already been visited
		while (file_server.visited(new Coordinates(position.x, position.z))) {
			System.out.println("Coordinate already explored, moving Robot");
			
			//TODO implement a way to change position to a useful coordinate (for now it's just a number)
			position.x = 9;
		}
		
		//instantiate new robot and add it to the robots array
		robots[robots_number - 1] = new Robot(position, name);
		robots[robots_number - 1].initBehavior();
		
		//store robot's position
		robots_positions[robots_number - 1] = new Coordinates(position.x, position.z);
		
		//remove the robot's current position 
		file_server.remove_coordinates(new Coordinates(position.x, position.z));
		return robots[robots_number - 1];
	}
	
	/**
	 * 
	 * @param color 
	 * @param position_color_found 
	 */
	public Coordinates start_mission(Color color) {
		//TODO return target box (for now just dummy position)
		return new Coordinates(0,0);
		
	}
	
	/**
	 * 
	 * @param robot
	 * @param position
	 */
	public void update_coordinates(Robot robot, Point3d position) {
		//TODO remove robot from parameter when done debugging (only used for output
		Coordinates coordinate = new Coordinates(position.x, position.z);
		
		if (!file_server.visited(coordinate)) {
			file_server.remove_coordinates(coordinate);
			System.out.println("I am " + robot.get_name() + " and I am at coordinate " + coordinate.x + "," + coordinate.y);
		}
	}
	/**
	 * 
	 * @param coordinates 
	 * @param color 
	 * @return 
	 */
	public boolean found_obstacle(Coordinates coordinates, BufferedImage cameraImage) {
		
		int color = cameraImage.getRGB(cameraImage.getHeight()/2, cameraImage.getWidth()/2);
		int blue = color & 0xff;
		int green = (color & 0xff00) >> 8;
		int red = (color & 0xff0000) >> 16;
		
		
		// TODO : implement object mapping here
		
		file_server.update_blocked(coordinates);
		
		
		
				
 	if(red > 250 && green < 50 && blue < 50) //these values are used to truly find red and not black
		{
			System.out.println("Picture taken " + red);
			return true;
		}
		
		else
		{
			return false;
		}
	
		
	}

	/**
	 * 
	 */
	private CentralStation() {
		//instantiating the robots array to hold maximum of 2 robots
		robots = new Robot[2];
		
		//instantiating array to store current position of robots as coordinates for maximum 2 robots
		robots_positions = new Coordinates[2];
		
		//Instantiating array with all possible behavior patterns
		behavior_patterns = new String[5];
		behavior_patterns[0] = "go_straigt";
		behavior_patterns[1] = "turn_right";
		behavior_patterns[2] = "turn_left";
		behavior_patterns[3] = "stop";
		behavior_patterns[4] = "found";
		
		//getting instance of File Server
		file_server = FileServer.getinstance();
		
	}

	/**
	 * 
	 */
	public void done_mapping() {
	}
};